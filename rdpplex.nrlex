#include <stdlib.h>
#include <string.h>

#include "rdpplex.h"

static char *getCode(char *input, int *cursor)
{
char *tmp, *p, last;
int  count, level, string, character, escaped;

	if(*(p=input++)!='{') return NULL;

	count = level = string = character = escaped = 0;

	while((last = *input++)){
		count++;
		if(escaped){
			escaped = 0;
		}else if(character==0 && last=='"'){
			if(string == 0) string = 1; else string = 0;
		}else if(string==1 && last=='\\'){
			escaped = 1;
		}else if(string==0 && last=='\''){
			if(character == 0) character = 1; else character = 0;
		}else if(character==1 && last=='\\'){
			escaped = 1;
		}else if(!string && !character && last=='{'){
			level++;
		}else if(!string && !character && last=='}'){
			if(level--==0) break;
		}
	}

	if(last>0){
		if((tmp = malloc(count))==NULL) return NULL;
		strncpy(tmp, p+1, count-1);
		tmp[count-1] = 0;
	}else{
		tmp=strdup("");
	}

	(*cursor) += count;
	return tmp;
}

%%rdpplex char*

%define A	A-Z_
%define a	a-z_

:		: *value = NULL; return COLON;
;		: *value = NULL; return SEMICOLON;
|		: *value = NULL; return VBAR;
\a\a*		: *value = nrDupToken(input, size); return NONTERMINAL;
\A\A*		: *value = nrDupToken(input, size); return TERMINAL;
{		: *value = getCode(input, cursor); return CODEBETWEENCURLYBRACES;
\s		: 
\n		: *((int *)extra) = *((int *)extra) + 1;
\t		: 
\r		: 
